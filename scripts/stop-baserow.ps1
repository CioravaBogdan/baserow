# Script pentru oprirea »ôi curƒÉ»õarea stack-ului Baserow
param(
    [switch]$Cleanup = $false,
    [switch]$RemoveVolumes = $false,
    [switch]$Force = $false
)

Write-Host "=== Baserow Stack Shutdown Script ===" -ForegroundColor Cyan

# Func»õie pentru oprirea serviciilor
function Stop-BaserowStack {
    Write-Host "`nüõë Oprire servicii Baserow..." -ForegroundColor Yellow
    
    try {
        # Opre»ôte toate serviciile
        docker-compose down
        
        Write-Host "‚úÖ Serviciile au fost oprite" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå Eroare la oprirea serviciilor: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Func»õie pentru curƒÉ»õarea imaginilor
function Remove-Images {
    Write-Host "`nüßπ CurƒÉ»õare imagini Docker..." -ForegroundColor Yellow
    
    try {
        # »òterge imaginile pentru acest proiect
        $images = docker images --filter "label=com.docker.compose.project=baserow" -q
        if ($images) {
            docker rmi $images -f
            Write-Host "‚úÖ Imaginile au fost »ôterse" -ForegroundColor Green
        } else {
            Write-Host "‚ÑπÔ∏è  Nu sunt imagini de »ôters" -ForegroundColor Cyan
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Eroare la »ôtergerea imaginilor: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Func»õie pentru curƒÉ»õarea volumelor
function Remove-Volumes {
    Write-Host "`nüíæ CurƒÉ»õare volume Docker..." -ForegroundColor Yellow
    
    if (-not $Force) {
        Write-Host "‚ö†Ô∏è  ATEN»öIE: AceastƒÉ opera»õie va »ôterge TOATE DATELE!" -ForegroundColor Red
        Write-Host "Aceasta include:" -ForegroundColor Yellow
        Write-Host "  - Baza de date Baserow cu toate tabelele »ôi datele" -ForegroundColor White
        Write-Host "  - ConfigurƒÉrile Grafana" -ForegroundColor White
        Write-Host "  - Datele Redis" -ForegroundColor White
        Write-Host "  - Logs-urile »ôi metricile" -ForegroundColor White
        
        $response = Read-Host "`nE»ôti sigur cƒÉ vrei sƒÉ continui? Scrie 'DELETE' pentru confirmare"
        if ($response -ne "DELETE") {
            Write-Host "Opera»õia a fost anulatƒÉ." -ForegroundColor Green
            return
        }
    }
    
    try {
        # Opre»ôte tot √Ænainte de a »ôterge volumele
        docker-compose down -v
        
        # »òterge volumele pentru acest proiect
        $volumes = docker volume ls --filter "label=com.docker.compose.project=baserow" -q
        if ($volumes) {
            docker volume rm $volumes -f
            Write-Host "‚úÖ Volumele au fost »ôterse" -ForegroundColor Green
        } else {
            Write-Host "‚ÑπÔ∏è  Nu sunt volume de »ôters" -ForegroundColor Cyan
        }
    } catch {
        Write-Host "‚ùå Eroare la »ôtergerea volumelor: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Func»õie pentru curƒÉ»õarea completƒÉ
function Complete-Cleanup {
    Write-Host "`nüßΩ CurƒÉ»õare completƒÉ sistem..." -ForegroundColor Yellow
    
    try {
        # CurƒÉ»õare generalƒÉ Docker
        docker system prune -f
        
        # CurƒÉ»õare re»õele nefolosite
        docker network prune -f
        
        Write-Host "‚úÖ CurƒÉ»õare completƒÉ finalizatƒÉ" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Eroare la curƒÉ»õarea completƒÉ: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Func»õie pentru backup √Ænainte de curƒÉ»õare
function Backup-Data {
    Write-Host "`nüíæ Backup date √Ænainte de curƒÉ»õare..." -ForegroundColor Yellow
    
    $backupDir = "backups\emergency-backup-$(Get-Date -Format 'yyyy-MM-dd-HH-mm-ss')"
    
    try {
        # CreeazƒÉ directorul de backup
        New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
        
        # Backup baza de date dacƒÉ containerul ruleazƒÉ
        $dbContainer = docker ps --filter "name=baserow-postgres" --format "{{.Names}}"
        if ($dbContainer) {
            Write-Host "üì¶ Backup baza de date..." -ForegroundColor Cyan
            docker exec $dbContainer pg_dump -U baserow baserow > "$backupDir\database-backup.sql"
            Write-Host "‚úÖ Backup baza de date salvat √Æn $backupDir\database-backup.sql" -ForegroundColor Green
        }
        
        # Backup configurarea
        if (Test-Path ".env") {
            Copy-Item ".env" "$backupDir\.env.backup"
            Write-Host "‚úÖ Backup .env salvat" -ForegroundColor Green
        }
        
        if (Test-Path "docker-compose.yml") {
            Copy-Item "docker-compose.yml" "$backupDir\docker-compose.yml.backup"
            Write-Host "‚úÖ Backup docker-compose.yml salvat" -ForegroundColor Green
        }
        
        Write-Host "‚úÖ Backup complet salvat √Æn: $backupDir" -ForegroundColor Green
        return $backupDir
    } catch {
        Write-Host "‚ö†Ô∏è  Eroare la backup: $($_.Exception.Message)" -ForegroundColor Yellow
        return $null
    }
}

# Func»õie pentru afi»ôarea statusului curent
function Show-CurrentStatus {
    Write-Host "`nüìä Status curent:" -ForegroundColor Cyan
    
    try {
        $containers = docker-compose ps
        if ($containers) {
            Write-Host "Containere active:"
            Write-Host $containers
        } else {
            Write-Host "Nu sunt containere active pentru acest proiect." -ForegroundColor Green
        }
        
        # VerificƒÉ volumele
        $volumes = docker volume ls --filter "label=com.docker.compose.project=baserow" --format "table {{.Name}}\t{{.Driver}}\t{{.Size}}"
        if ($volumes) {
            Write-Host "`nVolume existente:"
            Write-Host $volumes
        }
        
        # VerificƒÉ imaginile
        $images = docker images --filter "label=com.docker.compose.project=baserow" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        if ($images) {
            Write-Host "`nImagini existente:"
            Write-Host $images
        }
    } catch {
        Write-Host "Nu s-a putut determina statusul Docker" -ForegroundColor Yellow
    }
}

# Main execution
Show-CurrentStatus

# Opre»ôte serviciile
$stopSuccess = Stop-BaserowStack

if (-not $stopSuccess) {
    Write-Host "`n‚ùå Nu s-au putut opri serviciile." -ForegroundColor Red
    exit 1
}

# Backup dacƒÉ se face curƒÉ»õare
if ($Cleanup -or $RemoveVolumes) {
    $backupPath = Backup-Data
    if ($backupPath) {
        Write-Host "`nüíæ Datele au fost salvate √Æn backup: $backupPath" -ForegroundColor Green
    }
}

# CurƒÉ»õare op»õionalƒÉ
if ($Cleanup) {
    Remove-Images
    Complete-Cleanup
}

# »òtergere volume op»õionalƒÉ  
if ($RemoveVolumes) {
    Remove-Volumes
}

Write-Host "`n‚úÖ OPRIRE COMPLETƒÇ!" -ForegroundColor Green

if ($Cleanup -or $RemoveVolumes) {
    Write-Host "`nPentru a reporni sistemul:" -ForegroundColor Cyan
    Write-Host ".\scripts\start-baserow.ps1" -ForegroundColor White
} else {
    Write-Host "`nPentru a reporni serviciile:" -ForegroundColor Cyan
    Write-Host "docker-compose up -d" -ForegroundColor White
    Write-Host "`nsau:" -ForegroundColor Cyan
    Write-Host ".\scripts\start-baserow.ps1" -ForegroundColor White
}

if ($backupPath) {
    Write-Host "`nBackup disponibil √Æn: $backupPath" -ForegroundColor Green
}
